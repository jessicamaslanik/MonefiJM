using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Build.Framework;
using Microsoft.Extensions.Logging;
using Sabio.Models;
using Sabio.Models.Interfaces;
using Sabio.Models.Requests.TestQuestions;
using Sabio.Services;
using Sabio.Web.Controllers;
using Sabio.Web.Models.Responses;
using System;

namespace Sabio.Web.Api.Controllers
{
    [Route("api/testquestions")]
    [ApiController]
    public class TestQuestionApiController : BaseApiController
    {
        private ITestQuestionService _service = null;
        private IAuthenticationService<int> _authService = null;

        public TestQuestionApiController(ITestQuestionService service
                                         , ILogger<PingApiController> logger
                                         , IAuthenticationService<int> authService) : base(logger)
        {
            _service = service;
            _authService = authService;
        }

        [HttpPost]
        public ActionResult<ItemResponse<int>> AddTestQuestion(TestQuestionAddRequest model)
        {
            ObjectResult result = null;

            try
            {
                
                IUserAuthData user = _authService.GetCurrentUser();
                model.UserId = user.Id;
                int id = _service.AddTestQuestion(model);
                ItemResponse<int> response = new ItemResponse<int>() { Item = id };

                response.Item = id;

                result = Created201(response);
            }
            catch (Exception ex)
            {
                ErrorResponse response = new ErrorResponse(ex.Message);
                result = StatusCode(500, response);
            }
            return result;
        }

        [HttpPut("{id:int}")]
        public ActionResult<SuccessResponse> UpdateTestQuestion(TestQuestionUpdateRequest model)
        {
            int code = 200;
            BaseResponse response = null;
            try
            {
                
                IUserAuthData user = _authService.GetCurrentUser();
                model.UserId = user.Id;
                _service.UpdateTestQuestion(model);
                response = new SuccessResponse();
            }
            catch (Exception ex)
            {
                code = 500;
                response = new ErrorResponse(ex.Message);
            }
            return StatusCode(code, response);
        }


        [HttpPut("delete/{id:int}")]
        public ActionResult<SuccessResponse> DeleteTestQuestion(int id)
        {
            int code = 200;
            BaseResponse response = null;
            try
            {
                
                IUserAuthData user = _authService.GetCurrentUser();
                _service.DeleteTestQuestion(id);

                response = new SuccessResponse();
            }
            catch (Exception ex)
            {
                code = 500;
                response = new ErrorResponse(ex.Message);
            }
            return StatusCode(code, response);
        }
    }
}
